import React, { useState, useEffect } from 'react';
import { 
  PieChart, Pie, Cell, Legend, Tooltip, ResponsiveContainer
} from 'recharts';
import { getVulnerabilityAnalytics, getExcelUploads } from '../../services/api';

const DEFAULT_COLORS = {
  LOW: '#22c55e',
  MEDIUM: '#f59e0b',
  HIGH: '#FF0000',
  CRITICAL: '#8B0000',
  PRODUCTION: '#ef4444',
  STAGING: '#f59e0b',
  DEVELOPMENT: '#22c55e',
  UAT: '#3b82f6',
  PASS: '#22c55e',
  FAIL: '#ef4444',
  PARTIAL: '#f59e0b',
  NOT_APPLICABLE: '#6b7280'
};

const RESULT_OPTIONS = [
  'Remediated',
  'Risk Accepted',
  'Plan for Remediation',
  'No evidence of remediation',
  'Unresolved',
  'Risk Avoided',
];

const CRITICALITY_KEYS = ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW'];

// Custom label renderer to reduce overlap when values are 0%
const renderPieLabel = ({ cx, cy, midAngle, outerRadius, percent, name, value, index }) => {
  const RADIAN = Math.PI / 180;
  const radius = outerRadius + 20;
  const x = cx + radius * Math.cos(-midAngle * RADIAN);
  const y = cy + radius * Math.sin(-midAngle * RADIAN);
  
  // Only show labels for values > 0
  if (!value || value === 0) return null;
  
  const anchor = x > cx ? 'start' : 'end';
  const fill = '#374151';
  
  return (
    <text x={x} y={y} textAnchor={anchor} fill={fill} fontSize={12} fontWeight={500}>
      {`${name}: ${((percent || 0) * 100).toFixed(0)}%`}
    </text>
  );
};

const VulnerabilityCharts = ({ colors = {} }) => {
  const [analytics, setAnalytics] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [environmentFilter, setEnvironmentFilter] = useState('');
  const [uploads, setUploads] = useState([]);
  const [selectedUpload, setSelectedUpload] = useState('');
  const [resultFilter, setResultFilter] = useState('');
  const [environmentOptions, setEnvironmentOptions] = useState([]);

  const COLORS = { ...DEFAULT_COLORS, ...colors };

  // One-time fetch to populate full environment options list (unfiltered)
  useEffect(() => {
    const fetchAllEnvOptions = async () => {
      try {
        const res = await getVulnerabilityAnalytics({});
        const allEnvs = Object.keys(res?.data?.by_environment || {});
        setEnvironmentOptions(allEnvs);
      } catch (e) {
        // If this fails, we fall back to options from filtered data later
      }
    };
    if (environmentOptions.length === 0) {
      fetchAllEnvOptions();
    }
  }, [environmentOptions.length]);

  useEffect(() => {
    const fetchUploadsAndData = async () => {
      try {
        setLoading(true);
        // Load uploads (once)
        if (uploads.length === 0) {
          const up = await getExcelUploads();
          setUploads(up.data || []);
          if (!selectedUpload && (up.data || []).length > 0) {
            setSelectedUpload((up.data[0] && up.data[0].id) || '');
          }
        }
        const params = {};
        if (selectedUpload) params.excel_upload = selectedUpload;
        if (environmentFilter) params.environment = environmentFilter;
        if (resultFilter) params.result = resultFilter;
        const response = await getVulnerabilityAnalytics(params);
        setAnalytics(response.data);
        // If environmentOptions not yet set, initialize from current data
        if (environmentOptions.length === 0) {
          const currentEnvs = Object.keys(response?.data?.by_environment || {});
          if (currentEnvs.length > 0) setEnvironmentOptions(currentEnvs);
        }
      } catch (err) {
        setError('Failed to load vulnerability analytics');
        console.error('Error fetching analytics:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchUploadsAndData();
  }, [selectedUpload, environmentFilter, resultFilter]);

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-md p-4">
        <p className="text-red-800">{error}</p>
      </div>
    );
  }

  // Prepare data for charts (criticality and business criticality)
  const criticalityData = CRITICALITY_KEYS.map(key => ({
    name: key,
    count: (analytics?.by_criticality || {})[key] || 0,
    fill: COLORS[key] || '#6b7280'
  }));

  const businessCriticalityData = Object.entries(analytics?.by_business_criticality || {}).map(([key, value]) => ({
    name: key,
    count: value,
    fill: COLORS[key] || '#6b7280'
  }));

  // Third pie: Criticality distribution constrained by selected Result (same colors as pie 1/2)
  let criticalityByResultData = CRITICALITY_KEYS.map(key => ({
    name: key,
    count: (analytics?.by_criticality || {})[key] || 0,
    fill: COLORS[key] || '#6b7280'
  }));

  // Special case: when Result = Remediated, force zeroes
  if (resultFilter === 'Remediated') {
    criticalityByResultData = criticalityByResultData.map(item => ({ ...item, count: 0 }));
  }

  // Environment options (exclude Production/Development)
  const envOptionsRaw = environmentOptions.length > 0
    ? environmentOptions
    : Object.keys(analytics?.by_environment || {});
  const envOptions = envOptionsRaw.filter(env => {
    const v = String(env).toLowerCase();
    return v !== 'production' && v !== 'development';
  });

  return (
    <div>
      <div className="mb-6">
        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-3">
          <div>
            <h2 className="text-2xl font-bold text-gray-900 dark:text-white">Vulnerability Analytics</h2>
            <p className="text-gray-600 dark:text-gray-400">Analyze vulnerability patterns and trends</p>
          </div>
        </div>
      </div>

      {/* Filters Bar */}
      <div className="p-4 mb-6 bg-white text-gray-900 dark:bg-neutral-900 dark:text-white rounded-lg border border-neutral-200 dark:border-neutral-800">
        <div className="flex flex-col sm:flex-row sm:items-center gap-3">
          <div className="flex items-center gap-2">
            <span className="text-sm text-neutral-300">Excel Upload</span>
            <select
              className="input-base px-3 py-1.5"
              value={selectedUpload}
              onChange={(e) => setSelectedUpload(e.target.value)}
            >
              <option value="">All Uploads</option>
              {uploads.map(u => (
                <option key={u.id} value={u.id}>{new Date(u.uploaded_at).toLocaleDateString()}</option>
              ))}
            </select>
          </div>
          <div className="flex items-center gap-2">
            <span className="text-sm text-neutral-300">Tested Environment</span>
            <select
              className="input-base px-3 py-1.5"
              value={environmentFilter}
              onChange={(e) => setEnvironmentFilter(e.target.value)}
            >
              <option value="">All Environments</option>
              {envOptions.map(env => (
                <option key={env} value={env}>{env}</option>
              ))}
            </select>
          </div>
          <div className="flex items-center gap-2">
            <span className="text-sm text-neutral-300">Result</span>
            <select
              className="input-base px-3 py-1.5"
              value={resultFilter}
              onChange={(e) => setResultFilter(e.target.value)}
            >
              <option value="">All Results</option>
              {RESULT_OPTIONS.map(opt => (
                <option key={opt} value={opt}>{opt}</option>
              ))}
            </select>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8">

        {/* Criticality based on CVSS score */}
        <div className="p-6 bg-white text-gray-900 dark:bg-neutral-900 dark:text-white rounded-lg border border-neutral-200 dark:border-neutral-800 shadow-sm hover:shadow-md transition-shadow duration-200">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">Criticality based on CVSS score</h3>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={criticalityData}
                cx="50%"
                cy="50%"
                outerRadius={80}
                dataKey="count"
                labelLine={false}
                label={renderPieLabel}
                paddingAngle={0}
              >
                {criticalityData.map((entry, index) => (
                  <Cell key={`cvss-${index}`} fill={entry.fill} />
                ))}
              </Pie>
              <Tooltip />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </div>

        {/* Criticality Based in Business Context */}
        <div className="p-6 bg-white text-gray-900 dark:bg-neutral-900 dark:text-white rounded-lg border border-neutral-200 dark:border-neutral-800 shadow-sm hover:shadow-md transition-shadow duration-200">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">Criticality Based in Business Context</h3>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={businessCriticalityData}
                cx="50%"
                cy="50%"
                outerRadius={80}
                dataKey="count"
                labelLine={false}
                label={renderPieLabel}
                paddingAngle={0}
              >
                {businessCriticalityData.map((entry, index) => (
                  <Cell key={`biz-${index}`} fill={entry.fill} />
                ))}
              </Pie>
              <Tooltip />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </div>

        {/* By Result (Criticality) */}
        <div className="p-6 bg-white text-gray-900 dark:bg-neutral-900 dark:text-white rounded-lg border border-neutral-200 dark:border-neutral-800 shadow-sm hover:shadow-md transition-shadow duration-200">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">By Result (Criticality)</h3>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={criticalityByResultData}
                cx="50%"
                cy="50%"
                outerRadius={80}
                dataKey="count"
                labelLine={false}
                label={renderPieLabel}
                paddingAngle={0}
              >
                {criticalityByResultData.map((entry, index) => (
                  <Cell key={`rescrit-${index}`} fill={entry.fill} />
                ))}
              </Pie>
              <Tooltip />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Summary Stats */}
      <div className="p-6 bg-white text-gray-900 dark:bg-neutral-900 dark:text-white rounded-lg border border-neutral-200 dark:border-neutral-800">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-6">Summary Statistics</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="text-center p-6 bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 rounded-lg border border-blue-200 dark:border-blue-700">
            <h4 className="text-sm font-medium text-blue-700 dark:text-blue-300 mb-2">Total Vulnerabilities</h4>
            <p className="text-3xl font-bold text-blue-900 dark:text-blue-100">
              {Object.values(analytics?.by_criticality || {}).reduce((a, b) => a + b, 0)}
            </p>
            <p className="text-xs text-blue-600 dark:text-blue-400 mt-1">Identified Issues</p>
          </div>
          <div className="text-center p-6 bg-gradient-to-br from-red-50 to-red-100 dark:from-red-900/20 dark:to-red-800/20 rounded-lg border border-red-200 dark:border-red-700">
            <h4 className="text-sm font-medium text-red-700 dark:text-red-300 mb-2">Critical & High</h4>
            <p className="text-3xl font-bold text-red-900 dark:text-red-100">
              {(analytics?.by_criticality?.CRITICAL || 0) + (analytics?.by_criticality?.HIGH || 0)}
            </p>
            <p className="text-xs text-red-600 dark:text-red-400 mt-1">High Priority</p>
          </div>
          <div className="text-center p-6 bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 rounded-lg border border-green-200 dark:border-green-700">
            <h4 className="text-sm font-medium text-green-700 dark:text-green-300 mb-2">Medium & Low</h4>
            <p className="text-3xl font-bold text-green-900 dark:text-green-100">
              {(analytics?.by_criticality?.MEDIUM || 0) + (analytics?.by_criticality?.LOW || 0)}
            </p>
            <p className="text-xs text-green-600 dark:text-green-400 mt-1">Lower Priority</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityCharts;
